
//weapon_item_spawn with helper model 
@PointClass base(Targetname,Angles) studioprop() = weapon_item_spawn
[
	//model(studio) : "Helper Model" : "models/w_models/weapons/w_eq_bile_flask.mdl" : "ONLY for visual aid."
	model(choices) : "Helper Model" : "models/editor/item_helper.mdl" : "Visual aid. Does not determine what spawns here." =
  	[
  	"models/editor/item_helper.mdl" 					: "Generic Helper" 
	"models\props\terror\ammo_stack.mdl"                : "Ammo pile (Only pile model spawns)"
	"models\w_models\weapons\w_eq_medkit.mdl"           : "First aid kit"
	"models\w_models\weapons\w_eq_molotov.mdl"          : "Molotov Cocktail"
	"models\w_models\weapons\w_eq_painpills.mdl"		: "Pain Pills"
	"models/w_models/weapons/w_eq_pipebomb.mdl"			: "Pipe Bomb"
	"models\props_equipment\oxygentank01.mdl"			: "Oxygen Tank"
	"models\props_junk\propanecanister001a.mdl"			: "Propane Tank"
	"models\props_junk\gas"                				: "Gasoline Can"
	"models\w_models\weapons\w_eq_adrenaline.mdl"   	: "Adrenaline"
	"models\w_models\weapons\w_eq_defibrillator.mdl"	: "Defibrillator"
  	"models/w_models/weapons/w_eq_bile_flask.mdl"		: "Boomer Bile"
	"models\weapons\melee\w_chainsaw.mdl"               : "Chainsaw"
	"models\w_models\weapons\w_grenade_launcher.mdl"    : "Grenade Launcher"
	"models\w_models\weapons\w_m60.mdl"                 : "M60 Machinegun"
	]
	
	weaponskin(integer) : "Weapon Skin" : -1 : "Some weapons have multiple versions of their textures, called skins. Set this to a number other than -1 to make the given weapon use that skin instead of the default."
	skin(integer) : "Skin" : 1 : "Some weapons have multiple versions of their textures, called skins."
	glowrange(float) : "Glow Range" : 0 : "Set a custom glow range for this spawner. 0 means use the default range."

	item1(integer) : "Ammo pile" : 0 
	item2(integer) : "First aid kit" : 0 
	item3(integer) : "Molotov Cocktail" : 1 
	item4(integer) : "Pain Pills" : 1 
	item5(integer) : "Pipe Bomb" : 1 
	item6(integer) : "Oxygen Tank" : 0
	item7(integer) : "Propane Tank" : 0
	item8(integer) : "Gasoline Can" : 0
//	item9(integer) : "" : 0				// These keys may be set in maps, beware if re-using them. Instead make a new itemN
//	item10(integer) : "" : 0
	item11(integer) : "Adrenaline" : 1
	item12(integer) : "Defibrillator" : 0
	item13(integer) : "Boomer Bile" : 1
//	item14(integer) : "" : 0
//	item15(integer) : "" : 0
	item16(integer) : "Chainsaw" : 0
	item17(integer) : "Grenade Launcher" : 0	
	item18(integer) : "M60 Machinegun" : 0	

	melee_weapon(string) : "Melee Weapon" : "" : "Options: 'Any' or a comma-delimited string of melee weapon script names. Leave blank for none."

	spawnflags(Flags) =
	[
		1 : "Enable Physics on spawned item" : 0
		2 : "Spawned Item Must Exist" : 0
		8 : "Infinite Items" : 0
	]
]

//Player Start with Helper Model
@PointClass base(Targetname, Angles, Parentname) color(255 100 100) studio() = info_survivor_position : "A point where survivors are placed on map spawn, or when escaping the finale"
[
	SurvivorName(string) : "Survivor Name" : "" : "Force this survivor to use this position (Zoey, Louis, etc.)"
	SurvivorIntroSequence(string) : "Survivor Intro Sequence" : "" : "Sequence to play when the intro starts"
	model(choices) : "Helper Model" : "models/survivors/survivor_gambler.mdl" : "Visual aid for aligning intro animations. does NOT define what player spawns." =
	[
	"models/survivors/survivor_namvet.mdl" : "Bill"
	"models/survivors/survivor_coach.mdl" : "Coach"
	"models/survivors/survivor_mechanic.mdl" : "Ellis"
	"models/survivors/survivor_biker.mdl" : "Francis"
	"models/survivors/survivor_biker_light.mdl" : "Francis Light"
	"models/survivors/survivor_manager.mdl" : "Louis"
	"models/survivors/survivor_gambler.mdl" : "Nick"
	"models/survivors/survivor_producer.mdl" : "Rochelle"
	"models/survivors/survivor_teenangst.mdl" : "Zoey"
	"models/survivors/survivor_teenangst_light.mdl" : "Zoey Light"
	]		
	Order(integer) : "Order" : 1 : "Index of spot based on order people got on board. (1-4)"
	GameMode(string) : "Game Mode" : "" : "Use this position for a particular game mode only (coop,versus,survival,scavenge)"
	SurvivorConcept(string) : "Survivor Concept" : "" : "Response rule concept to play when survivor is moved here"
	HideWeapons(choices) : "Hide Weapons" : 0 : "Hide Survivor's weapon while locked to this position." =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input SetViewControl(string) : "If a survivor is assigned to this position, set his view to a point_viewcontrol"
]

//info_zombie_spawn with helper model
@PointClass base(Targetname, Angles, Parentname, Angles) studio() = info_zombie_spawn :
	"An entity used to spawn a zombie"
[
	model(studio) : "Helper Model" : "models/infected/common_male_formal.mdl" : "ONLY for visual aid."
	population(string) : "Population" : "default" : "Zombie population to choose among."
	
	offer_tank(choices) : "Offer Spawned Tank to PZs" : 0 =
	[
		0: "No"
		1: "Yes"
	]
	
	input SpawnZombie(void) : "Spawn a zombie now."
	input StartleZombie(string) : "Startle the zombie (witches only). Optionally pass the name of a survivor to attack."
	
		// Outputs
	output OnSpawnNormal(void) : "Fired when the spawner creates a normal infected."
	output OnSpawnSmoker(void) : "Fired when the spawner creates a Smoker."
	output OnSpawnBoomer(void) : "Fired when the spawner creates a Boomer."
	output OnSpawnHunter(void) : "Fired when the spawner creates a Hunter."
	output OnSpawnSpitter(void) : "Fired when the spawner creates a Spitter."
	output OnSpawnJockey(void) : "Fired when the spawner creates a Jockey."
	output OnSpawnCharger(void) : "Fired when the spawner creates a Charger."
	output OnSpawnWitch(void) : "Fired when the spawner creates a Witch."
	output OnSpawnTank(void) : "Fired when the spawner creates a Tank."
]

//commentary_zombie_spawner with helper model
@PointClass base(Targetname, Angles, Parentname, Angles) studio() = commentary_zombie_spawner :
	"Zombie Manual Spawning Point"
[
	model(studio) : "Helper Model" : "models/infected/hunter.mdl" : "ONLY for visual aid."
	input SpawnZombie(string) : "Spawn a specific zombie now. String format is zombie type followed by an optional target name (e.g. 'smoker,BostonJoe' or 'common_male_suit'). Zombie types: boomer, common_*, hunter, smoker, tank, witch"
	output OnSpawnedZombieDeath(void) : "One of the zombies spawned by this entity has died"
]

//Alarm Car with Default model
@PointClass base(prop_dynamic) studioprop() sphere(fademindist) sphere(fademaxdist) = prop_car_glass :
	"This class is the same as prop_dynamic, with a car alarm."
[
	model(studio) : "Model" : "models/props_vehicles/cara_95sedan_glass_alarm.mdl" : "default:\n models/props_vehicles/cara_95sedan_glass_alarm.mdl" 
]

@PointClass base(prop_physics, EnableDisable) studioprop() sphere(fademindist) sphere(fademaxdist) = prop_car_alarm :
	"This class is the same as prop_physics, with a car alarm."
[
	model(studio) : "Model" : "models/props_vehicles/cara_95sedan.mdl" : "default:\n models/props_vehicles/cara_95sedan.mdl" 

	output OnCarAlarmStart(void) : "Car alarm should go off"
	output OnCarAlarmEnd(void) : "Car alarm has shut off"
	output OnCarAlarmChirpStart(void) : ""
	output OnCarAlarmChirpEnd(void) : ""
]


//Camera's
@PointClass base(Targetname,Angles,Parentname) studioprop("models/editor/camera_multi.mdl") = point_viewcontrol_multiplayer : 
	"A camera entity that controls all players' views. While it's active, the players will see out of the camera." 
[
	fov(float) : "Field of view" : "90" : "Player FOV"
	fov_rate(float) : "Seconds to reach FOV target" : "1.0" : "Amount of time it should take to reach the specified FOV"
	target_entity(target_destination): "Target Entity" : "" : "Entity to move to. (End of move will match origin and angles)."
	interp_time(float) : "Seconds to reach target entity" : "1.0" : "Amount of time it should take to reach the target entity's origin and angles."
	
	spawnflags(flags) =
	[
		1: "Disable when move finished" : 1
		2: "Set FOV" : 0
	]

	// Inputs
	input Enable(void) : "Enable the point_viewcontrol_multiplayer, and start controlling the players' view."
	input Disable(void) : "Disable the point_viewcontrol_multiplayer, and stop controlling the players' view."
	input StartMovement(void) : "Start the movement to the target entity."
]

@PointClass base(Targetname,Angles,Parentname) studioprop("models/editor/camera_survivor.mdl") = point_viewcontrol_survivor : 
	"A camera entity that controls the player's view. Travels from camera position to a first-person view on input." 
[
	fov(float) : "Field of view" : "90" : "Player FOV (if Set FOV spawnflag is set)"
	fov_rate(float) : "Seconds to reach FOV target" : "1.0" : "Amount of time it should take to reach the specified FOV"

	spawnflags(flags) =
	[
		1: "Disable when move finished" : 1
		2: "Set FOV" : 0
	]

	// Inputs
	input Enable(string) : "Enable the point_viewcontrol, and start controlling the player's view. Pass a survivor name to control that survivor's view.(ie '!zoey')"
	input Disable(void) : "Disable the point_viewcontrol, and stop controlling the player's view."
	input StartMovement(void) : "Start the movement to first-person view."
]

@PointClass base(Targetname,Angles,Parentname) studioprop("models/editor/camera_deathfall.mdl") = point_deathfall_camera : 
	"A camera entity that players falling to their deaths look through." 
[
	fov(float) : "Field of view" : "90" : "Player FOV"
	fov_rate(float) : "Seconds to reach FOV target" : "1.0" : "Amount of time it should take to reach the specified FOV"
]
//Different model, to distinguish from info_player_Start
@PointClass base(Targetname, Parentname, Angles, PlayerClass) studio("models/editor/info_teleport_destination.mdl") = info_teleport_destination : 
	"An entity that does nothing itself, but can be used to specify the destination for a trigger_teleport entity. An info_target can be used instead."
[
]

//Upgrade_spawn with helper model
@PointClass base(Targetname, Angles)studioprop() = upgrade_spawn
[
	laser_sight(integer) : "Laser Sight" : 1
	upgradepack_incendiary(integer) : "UpgradePack - Incendiary" : 1
	upgradepack_explosive(integer) : "UpgradePack - Explosive" : 1
	
	spawnflags(Flags) =
	[
		1 : "Enable Physics on spawned item" : 0
		2 : "Spawned Item Must Exist" : 0
	]
	model(choices) : "Helper Model (Visual aid only)" : "models/w_models/weapons/w_laser_sights.mdl" =
	[
	"models/editor/upgrade_helper.mdl" 						: "Generic Helper" 
	"models/w_models/weapons/w_laser_sights.mdl" 			: "Laser"
	"models/w_models/weapons/w_eq_explosive_ammopack.mdl" 	: "Explosive Ammo"
	"models/w_models/weapons/w_eq_incendiary_ammopack.mdl"	: "Incendiary Ammo"
	]	
]

//env_steam with better understandable helper model
@PointClass base(Targetname, Parentname, Angles) studioprop("models/editor/axis_helper_arrow_Y.mdl") color(255 255 255) = env_steam : 
	"An entity used to create a jet of steam."
[
	spawnflags(flags) =
	[
		1 : "Emissive" : 0
	]

	InitialState(choices) : "Initial State" : 0 = 
	[
		0 : "Off"
		1 : "On"
	]

	//Type of particle to spew out
	type(choices) : "Particle Type" : 0 =
	[
		0 : "Normal"
		1 : "Heat Wave"
	]

	SpreadSpeed(integer) : "Spread Speed" : 15 : "The amount of random spread in the particle's velocity after they spawn."
	Speed(integer) : "Speed" : 120 : "The default speed at which the particles move after they spawn."
	StartSize(integer) : "Particle start size" : 10 : "The initial size of the particles after they spawn."
	EndSize(integer) : "Particle end size" : 25 : "The size of the particles at the point at which they are removed."
	Rate(integer) : "Emission rate" : 26 : "The rate of particle emission. i.e. particles per second."
	rendercolor(color255) : "Color (R G B)" : "255 255 255"
	JetLength(integer) : "Length of steam jet" : 80 : "The length of the jet determines the lifetime of each particle."
	renderamt(integer) : "Translucency" : 255
	rollspeed(float) : "How fast does the particles spin" : 8

	StartNoise(string) : "Start Sound" : "" : "Sound to play when starting emission."

	// Inputs
	input TurnOn(void) : "Turns the steam jet on."
	input TurnOff(void) : "Turns the steam jet off."
	input Toggle(void) : "Toggles the steam jet between on and off."
	input JetLength(integer) : "Sets the length of steam jet."
	input Rate(integer) : "Sets the particle emission rate in particles per second."
	input Speed(integer) : "Sets the default speed of the particles in units per second."
	input SpreadSpeed(integer) : "Sets the spread speed in units per second."
]
//Sky Camera helper model
@PointClass base(Angles) studio("models/editor/sky_camera.mdl") = sky_camera : 
	"An entity used to control the 3D Skybox. Its origin is used to determine the 3D Skybox's position relative to the map. Place this entity, in the 3D Skybox, at the point where the origin of the map should be."
[
	scale(integer) : "3D Skybox scale" : 16 : "Scale of the skybox. scale everything by .0625"
	fogenable(choices) : "Fog Enable" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	fogblend(choices) : "Fog Blend" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	use_angles(choices) : "Use Angles for Fog Dir" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	clip_3D_skybox_near_to_world_far(choices) : "Clip 3D sky near plane to world far plane" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	clip_3D_skybox_near_to_world_far_offset(string) : "3D sky near plane offset" : "0.0" : "Offset for the near clip plane for the 3D sky in world units.  This is only used if the above field is true.  Negative values to pull closer, etc."
	fogcolor(color255) : "Primary Fog Color" : "255 255 255"
	fogcolor2(color255) : "Secondary Fog Color" : "255 255 255"
	fogdir(string) : "Primary Fog Direction" : "1 0 0"
	fogstart(string) : "Fog Start" : "500.0" : "Distance at which the skybox fog should start."
	fogend(string) : "Fog End" : "2000.0" : "Distance at which the skybox fog should be fully opaque."
	fogmaxdensity(float) : "Fog Max Density [0..1]" : "1"

	HDRColorScale(float) : "HDR color scale." : "1.0" : "float value to multiply fog color by when running in HDR mode."
]

@PointClass base(Parentname, Targetname, Angles) color(255 128 0) studioprop("models/editor/axis_helper_arrow_X.mdl") = env_lightglow : 
	"An entity that puts an additive glow in the world, mostly used over light sources."
[
	rendercolor(color255) : "Color (R G B)" : "255 255 255"
	VerticalGlowSize(integer) : "Vertical Size" : 30
	HorizontalGlowSize(integer) : "Horizontal Size" : 30
	MinDist(integer) : "Minimum Distance" : 500 : "The distance at which this effect will be fully translucent."
	MaxDist(integer) : "Maximum Distance" : 2000 : "The distance at which this effect will be at full intensity."
	OuterMaxDist(integer) : "Outer Maximum Distance" : 0 : "If larger than the maximum distance, this is the length at which the glow will fade completely out, between the span of the maximum distance and this length."
	GlowProxySize(float) : "Glow Proxy Geometry Size" : "2.0" : "Size of the glow to be rendered for visibility testing. Must be larger than the distance from the sprite center to empty space. So if this glow is inside geometry (like a light bulb), set this value to be bigger than the bulb's radius. Any time a sphere of this radius would be visible (poking through any nearby geometry), the glow will be rendered."
	HDRColorScale(float) : "HDR color scale." : "0.5" : "float value to multiply sprite color by when running in HDR mode."

	// Inputs
	input Color(color255) : "Change the render color of the glow. Format: <Red 0-255> <Green 0-255> <Blue 0-255>"

	spawnflags(flags) =
	[
		1: "Visible only from front" : 0
	]
]

//	@PointClass base(Targetname, Angles) studioprop("models/editor/axis_helper_arrow_z.mdl") = env_splash : 
//		"An entity that creates a splash effect at its origin. If the 'find water surface' spawnflag is set, it will instead trace down below itself to find the water surface on which to create splashes."
//	[
//		scale(float) : "Scale of the splash" : "8.0"
//	
//		// Inputs
//		input Splash(void) : "Create a splash effect."
//	
//		spawnflags(flags) =
//		[
//			1: "Automatically find water surface (place entity above water)" : 0
//			2: "Diminish with depth (diminished completely in 10 feet of water)" : 1
//		]
//	]


//Env_Sprite using world glow as default with a helper model to easier select them in hammer when the sprite is large
@PointClass base(Targetname, Parentname, RenderFields)  studio("models/editor/sprite_ball.mdl") sprite() color(20 140 20) = env_sprite : 
	"An entity that controls the drawing of a sprite in the world." 
[
	framerate(string) : "Framerate" : "10.0" : "Rate at which the sprite should animate, if at all."
	model(sprite) : "Sprite Name" : "sprites/light_glow01.vmt" : "Material of the sprite to be drawn."
	scale(string) : "Scale" : "1" : "Scale multiplier of the sprite."
	spawnflags(flags) =
	[
		1: "Start on" : 0
		2: "Play Once" : 0
	]
	rendermode(choices) : "Render Mode" : 9 : "Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'." =
	[
		0: "Normal"
		1: "Color"
		2: "Texture"
		3: "Glow"
		4: "Solid"
		5: "Additive"
		7: "Additive Fractional Frame"
		9: "World Space Glow"
		10: "Dont Render"
	]
	GlowProxySize(float) : "Size of Glow Proxy Geometry." : "2.0" : "Size of the glow to be rendered for visibility testing. Must be larger than the distance from the sprite center to empty space.  So if this glow is inside geometry (like a light bulb), set this value to be bigger than the bulb's radius. Any time a sphere of this radius would be visible (poking through any nearby geometry), the glow will be rendered."

	HDRColorScale(float) : "HDR color scale." : "0.7" : "float value to multiply sprite color by when running in HDR mode."
	
	// Inputs
	input ColorRedValue(float) : "Sets the red color channel's value (0 - 255)."
	input ColorGreenValue(float) : "Sets the green color channel's value (0 - 255)."
	input ColorBlueValue(float) : "Sets the blue color channel's value (0 - 255)."
	input SetScale(float) : "Set the sprite's scale (0 - 8.0)."
	input HideSprite(void) : "Hide the sprite. Won't be drawn until the 'ShowSprite' input is received."
	input ShowSprite(void) : "Show the sprite."
	input ToggleSprite(void) : "Toggle the sprite between hidden and shown."

]
//env_sprite_oriented using world glow as default with a helper model to easier select them in hammer when the sprite is large
@PointClass base(env_sprite, Angles)  studio("models/editor/sprite_oriented_ball.mdl") sprite() color(20 140 20) = env_sprite_oriented :
    "A env_sprite that allows orientation."
[
	framerate(string) : "Framerate" : "10.0" : "Rate at which the sprite should animate, if at all."
	model(sprite) : "Sprite Name" : "sprites/light_glow01.vmt" : "Material of the sprite to be drawn."
	scale(string) : "Scale" : "1" : "Scale multiplier of the sprite."
	spawnflags(flags) =
	[
		1: "Start on" : 0
		2: "Play Once" : 0
	]

	GlowProxySize(float) : "Size of Glow Proxy Geometry." : "2.0" : "Size of the glow to be rendered for visibility testing. Must be larger than the distance from the sprite center to empty space.  So if this glow is inside geometry (like a light bulb), set this value to be bigger than the bulb's radius. Any time a sphere of this radius would be visible (poking through any nearby geometry), the glow will be rendered."

	HDRColorScale(float) : "HDR color scale." : "1.0" : "float value to multiply sprite color by when running in HDR mode."
	
	// Inputs
	input ColorRedValue(float) : "Sets the red color channel's value (0 - 255)."
	input ColorGreenValue(float) : "Sets the green color channel's value (0 - 255)."
	input ColorBlueValue(float) : "Sets the blue color channel's value (0 - 255)."
	input SetScale(float) : "Set the sprite's scale (0 - 8.0)."
	input HideSprite(void) : "Hide the sprite. Won't be drawn until the 'ShowSprite' input is received."
	input ShowSprite(void) : "Show the sprite."
	input ToggleSprite(void) : "Toggle the sprite between hidden and shown."
]