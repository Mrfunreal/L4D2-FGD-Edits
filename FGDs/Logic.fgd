@BaseClass = Targetname 
[ 
	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	
	vscripts(scriptlist) : "Entity Scripts" : "" : "Name(s) of script files that are executed after all entities have spawned."
	thinkfunction(string) : "Script think function" : "" : "Name of a function in this entity's script scope which will be called automatically."

	// Inputs
	input RunScriptFile(script) : "Execute a game script file from disk"
	input RunScriptCode(string) : "Execute a string of script source code"
	//PLAYER ONLY
	input IgnoreFallDamageWithoutReset(integer) : "PLAYER ONLY - Disable fall damage for N seconds"
	input SetCommentaryStatueMode(string) 		: "PLAYER ONLY - ?"
	input DisableLedgeHang(integer) 			: "PLAYER ONLY - Disable ledge hanging until turned back on."
	input EnableLedgeHang(integer) 				: "PLAYER ONLY - Enable ledge hanging."
	input TeleportToSurvivorPosition(integer) 	: "PLAYER ONLY - Teleport a player to an info_survivor_position entity, then freezes them. To unfreeze them, use the ReleaseSurvivorPositions input from info_director or the player's ReleaseFromSurvivorPosition input."
	input ReleaseFromSurvivorPosition(integer) 	: "PLAYER ONLY - Unfreezes and releases the player from an info_survivor_position entity if they are at one."
	input SetGlowEnabled(integer) 				: "PLAYER ONLY - Sets if this player is allowed to glow through walls if not visible."
	input RemoveWeaponUpgrades(integer) 		: "PLAYER ONLY - Removes laser sights from guns."
	input CancelCurrentScene(integer) 			: "PLAYER ONLY - Makes the player's character quit talking immediately."


	
	// Inputs
	input Kill(void) : "Removes this entity from the world."
	input KillHierarchy(void) : "Removes this entity and all its children from the world."
	input AddOutput(string) : "Adds an entity I/O connection to this entity. Format: <output name> <targetname>:<inputname>:<parameter>:<delay>:<max times to fire (-1 == infinite)>. Very dangerous, use with care."
	input FireUser1(void) : "Causes this entity's OnUser1 output to be fired."
	input FireUser2(void) : "Causes this entity's OnUser2 output to be fired."
	input FireUser3(void) : "Causes this entity's OnUser3 output to be fired."
	input FireUser4(void) : "Causes this entity's OnUser4 output to be fired."

	// Outputs	
	output OnUser1(void) : "Fired in response to FireUser1 input."
	output OnUser2(void) : "Fired in response to FireUser2 input."
	output OnUser3(void) : "Fired in response to FireUser3 input."
	output OnUser4(void) : "Fired in response to FireUser4 input."
	
	output OnKilled(void) : "Fired when the entity is killed and removed from the game."
]

//Gives info_director a default name
@PointClass base(Targetname) iconsprite("Editor/new/info_director.vmt") = info_director
[
	targetname(target_source) : "Name" : "!Director" : "The name that other entities refer to this entity by."

	// Inputs
	input PanicEvent(void) : "Fired when a major event happens that the director should know about."
	input ScriptedPanicEvent(string) : "Fired when a custom panic event wants to happen."
	input ForcePanicEvent(void) : "Trigger a panic event, no matter what else is going on."
	input EndCustomScriptedStage(void) : "End a custom scripted stage."
	input ForceSurvivorPositions(void) : "Make each survivor stand at an info_survivor_position."
	input ReleaseSurvivorPositions(void) : "Allow survivors to move freely again."
	input FireConceptToAny(string) : "Fire a speech concept to any survivor that is capable of speaking it."
	input IncrementTeamScore(integer) : "Increment a team's score. (2=survivors, 3=infected)"
	input StartIntro(void) : "Fire when the intro starts."
	input FinishIntro(void) : "Fire when the intro ends."
	input BeginScript(string) : "Begin a director script"
	input EndScript(void) : "End a director script"

	// Journaling inputs
	input CreateNewJournal(string) : "Create a new journal"
	input WriteToJournal(string) : "Add a task to the I/O Journal"
	input ExecuteJournal(string) : "Execute all tasks in the specified journal"
	
	input EnableTankFrustration(void) : "Can be used to enable the tank frustration meter."
	input DisableTankFrustration(void) : "Can be used to disable the tank frustration meter."


	// Outputs
	output OnGameplayStart(void) : "Fired when a map loads, all players join and gameplay begins."
	output OnCustomPanicStageFinished(void) : "Fired when each stage of a custom panic event or custom finale finishes."
	output OnPanicEventFinished(void) : "Fired when a panic event is finished."
	output OnTeamScored(void) : "Fired when a team places a scavenge item in the scavenge goal."

	output OnScavengeRoundStart(void) : "Fired when a scavenge round starts."
	output OnScavengeOvertimeStart(void) : "Timer has run out and game went into overtime."
	output OnScavengeOvertimeCancel(void) : "Time was added to the clock, ending overtime."
	output OnScavengeTimerExpired(void) : "Time has run out, game did not enter overtime."
	output OnScavengeIntensityChanged(Integer) : "Intensity level has changed. 1 = highest intensity, decreases as number gets larger."
	
	output OnUserDefinedScriptEvent1(void) : "generic user defined event fired from a squirrel script"
	output OnUserDefinedScriptEvent2(void) : "generic user defined event fired from a squirrel script"
	output OnUserDefinedScriptEvent3(void) : "generic user defined event fired from a squirrel script"
	output OnUserDefinedScriptEvent4(void) : "generic user defined event fired from a squirrel script"
	
]

