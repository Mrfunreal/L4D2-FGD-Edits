@BaseClass = obsolete 
[ 
	obsolete(string) : "This Is Obsolete" : : "This entity is obsolete in L4D2 and does nothing."
]
@PointClass color(255 0 0) base(obsolete) iconsprite("editor/obsolete.vmt") = func_useableladder : 
	"HL2 leftover for when Nodes were used instead of navmesh."
[
	obsolete(string) : "HL2 Leftover" : : "This entity is in the FGD but L4D2 does not use it."
]
@PointClass color(255 0 0) base(obsolete) iconsprite("editor/obsolete.vmt")= func_ladderendpoint : 
	"HL2 leftover for when Nodes were used instead of navmesh."
[
	obsolete(string) : "HL2 Leftover" : : "This entity is in the FGD but L4D2 does not use it."
]
@PointClass color(255 0 0) base(obsolete) iconsprite("editor/obsolete.vmt")= info_ladder_dismount : 
	"HL2 leftover for when Nodes were used instead of navmesh."
[
	obsolete(string) : "HL2 Leftover" : : "This entity is in the FGD but L4D2 does not use it."
]
@PointClass color(255 0 0) base(obsolete) iconsprite("editor/obsolete.vmt") = info_node :
	"HL2 leftover for when Nodes were used instead of navmesh."
[
	obsolete(string) : "HL2 Leftover" : : "This entity is in the FGD but L4D2 does not use it."
]
@PointClass color(255 0 0) base(obsolete) iconsprite("editor/obsolete.vmt") = info_node_hint :
	"HL2 leftover for when Nodes were used instead of navmesh."
[
	obsolete(string) : "HL2 Leftover" : : "This entity is in the FGD but L4D2 does not use it."
]
@PointClass color(255 0 0) base(obsolete) iconsprite("editor/obsolete.vmt")  = info_node_air :
	"HL2 leftover for when Nodes were used instead of navmesh."
[
	obsolete(string) : "HL2 Leftover" : : "This entity is in the FGD but L4D2 does not use it."
]
@PointClass color(255 0 0) base(obsolete) iconsprite("editor/obsolete.vmt")= info_node_air_hint :
	"HL2 leftover for when Nodes were used instead of navmesh."
[
	obsolete(string) : "HL2 Leftover" : : "This entity is in the FGD but L4D2 does not use it."
]
@PointClass color(255 0 0) base(obsolete) iconsprite("editor/obsolete.vmt")= info_hint :
	"HL2 leftover for when Nodes were used instead of navmesh."
[
	obsolete(string) : "HL2 Leftover" : : "This entity is in the FGD but L4D2 does not use it."
]
@PointClass color(255 0 0) base(obsolete) iconsprite("editor/obsolete.vmt")= info_node_link :
	"HL2 leftover for when Nodes were used instead of navmesh."
[
	obsolete(string) : "HL2 Leftover" : : "This entity is in the FGD but L4D2 does not use it."
]
@PointClass color(255 0 0) base(obsolete) iconsprite("editor/obsolete.vmt")= info_node_link_controller :
	"HL2 leftover for when Nodes were used instead of navmesh."
[
	obsolete(string) : "HL2 Leftover" : : "This entity is in the FGD but L4D2 does not use it."
]
@PointClass color(255 0 0) base(obsolete) iconsprite("editor/obsolete.vmt")= info_radial_link_controller :
		"HL2 leftover for when Nodes were used instead of navmesh."
[
	obsolete(string) : "HL2 Leftover" : : "This entity is in the FGD but L4D2 does not use it."
]
@PointClass color(255 0 0) base(obsolete) iconsprite("editor/obsolete.vmt")= info_node_climb : 
	"HL2 leftover for when Nodes were used instead of navmesh."
[
	obsolete(string) : "HL2 Leftover" : : "This entity is in the FGD but L4D2 does not use it."
]
@PointClass color(255 0 0) base(obsolete) iconsprite("editor/obsolete.vmt") = prop_minigun :
	"Old L4D1 gatling entity, but is used as prop_mounted_machineun in L4D2. Use prop_minigun_l4d1 instead."
[
	obsolete(string) : "!!!! Use prop_minigun_l4d1 !!!!" : : "This entity is obsolete in L4D2 and spawns as prop_mounted_machineun instead."

]
@PointClass color(255 0 0) base(obsolete, Targetname) iconsprite("editor/obsolete.vmt")= game_weapon_manager : 
	"An entity used to limit the number of a particular weapon type in the world. Useful in places where NPCs are spawning rapidly, dying, and dropping weapons." 
[
	weaponname(string) : "Weapon Classname" : "" : "Classname of the weapon type to limit."
	maxpieces(integer) : "Max Allowed in Level"	: 0 : "The maximum amount of the specified weapon type allowed in the world."
	ammomod(float)	   : "Ammo modifier" : 1 : 	"Modifier for ammount of ammo dropped by a weapon."
	// Inputs
	input SetAmmoModifier(float): "Adjust the ammo modifier."
]
@PointClass color(255 0 0) base(obsolete, Targetname)  iconsprite("editor/obsolete.vmt")= game_end : 
	"An entity that ends a multiplayer game. Should not be used." 
[
	master(string) : "Master (Obsolete)" : : "Legacy support: The name of a master entity. If the master hasn't been activated, this entity will not activate."
	input EndGame(void) : "End the multiplayer game."
]
@PointClass color(255 0 0) base(obsolete, Targetname) iconsprite("editor/obsolete.vmt") = game_player_equip : 
	"An entity that gives equipment to the player who activates it. To use, add new keys to this entity, where each key is the classname of a weapon/item, and the corresponding value is the number of those weapons/items to give to the player who uses this entity. If the 'Use Only' spawnflag isn't set, then players can just touch this entity to get the equipment."
[
	spawnflags(flags) =
	[
		1: "Use Only" : 0
	]
	master(string) : "Team Master (Obsolete)" : : "Legacy support: The name of a master entity. If the master hasn't been activated, this entity will not activate."	
]
@PointClass color(255 0 0) base(obsolete, Targetname) iconsprite("editor/obsolete.vmt") = game_player_team : 
	"An entity that changes the team of the player who activates it."
[
	spawnflags(flags) =
	[
		1 : "Remove On fire" : 0
		2 : "Kill Player" : 0
		4 : "Gib Player" : 0
	]
	target(string) : "game_team_master to use" 
	master(string) : "Master (Obsolete)" : : "Legacy support: The name of a master entity. If the master hasn't been activated, this entity will not activate."	
]
@PointClass color(255 0 0) base(obsolete, Targetname) iconsprite("editor/obsolete.vmt") = game_score : 
	"An entity that awards/deducts points from the player who activates it." 
[
	spawnflags(flags) =
	[
		1: "Allow Negative" : 0
		2: "Team Points" : 0
	]
	points(integer) : "Points to add (+/-)" : 1
	master(string) : "Master (Obsolete)" : : "Legacy support: The name of a master entity. If the master hasn't been activated, this entity will not activate."
	// Inputs
	input ApplyScore(void) : "Add score to player."
]
@PointClass color(255 0 0) base(obsolete) iconsprite("editor/obsolete.vmt") = info_overlay_transition :
	"This entity is in the FGD but L4D2 does not have it."
[
	obsolete(string) : "Does not exist" : : "This entity is in the FGD but L4D2 does not have it."
]
// This is obsolete, info_target is all you need now.
@PointClass color(255 0 0) base(obsolete, Targetname, Parentname, Angles, PlayerClass) studio("models/editor/playerstart.mdl") = info_teleport_destination : 
	"An entity that does nothing itself, but can be used to specify the destination for a trigger_teleport entity. An info_target can be used instead."
[
	obsolete(string) : "Use info_target" : : " "
]


@PointClass color(255 0 0) base(obsolete) iconsprite("editor/obsolete.vmt") = info_npc_spawn_destination : 
	"This entity is in the FGD but L4D2 does not have it."
[
	obsolete(string) : "Does not exist" : : "This entity is in the FGD but L4D2 does not have it."
]

@PointClass color(255 0 0) base(obsolete) iconsprite("editor/obsolete.vmt") = npc_template_maker : 
	"This entity is in the FGD but L4D2 does not have it."
[
	obsolete(string) : "Does not exist" : : "This entity is in the FGD but L4D2 does not have it."
]
//obsolete?
//@PointClass base(Targetname, Parentname, Angles, RenderFxChoices, RenderFields) studio() = cycler : 
//	"An entity used to display a model for testing purposes. Shooting it with cycle through the model's animations."
//[
//	spawnflags(flags) =
//	[
//		1: "Not Solid" : 0
//	]
//	model(studio) : "Model"
//	skin(integer) : "Skin" : 0 : "Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default."
//
//	sequence(integer) : "Sequence" : 0 : "Default animation sequence for the model to be playing after spawning."
//
//	// Inputs
//	input SetSequence(string) : "Sets the cycler's sequence."
//]
//@PointClass color(255 0 0) base(obsolete, gibshooterbase, RenderFields) iconsprite("editor/obsolete.vmt") = env_rotorshooter : 
//	"An entity that creates gibs when it's within the influence of a helicopter's rotor wash."
//[
//	shootmodel(studio) : "Model" : "" : "Thing to shoot out.  Can be a .mdl or a .vmt."
//	shootsounds(choices) :"Material Sound" : -1 =
//	[
//		-1: "None"
//		0: "Glass"
//		1: "Wood"
//		2: "Metal"
//		3: "Flesh"
//		4: "Concrete"  
//	]
//	simulation(choices) :"Simulate" : 0 =
//	[
//		0: "Point"
//		1: "Physics"
//		2: "Ragdoll"
//	]
//
//	skin(integer) : "Gib Skin" : 0 : "Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin on all gibs produced by this shooter."
//
//	spawnflags(flags) =
//	[
//		2 : "On fire" : 0
//	]
//
//	rotortime(float) : "Time Under Rotor" : "1" : "The average time it has to be under the rotor before it shoots a gib."
//	rotortimevariance(float) : "Time variance" : "0.3" : "The random amount to vary the time it has to be under the rotor before it shoots a gib."
//]
@PointClass color(255 0 0) base(obsolete)  iconsprite("editor/obsolete.vmt")= env_rotorwash_emitter :
	"This entity is in the FGD but L4D2 does not have it."
[
	obsolete(string) : "Does not exist" : : "This entity is in the FGD but L4D2 does not have it."
]
@PointClass color(255 0 0) base(obsolete,gibshooterbase) iconsprite("editor/obsolete.vmt") = gibshooter : 
	"An entity that shoots out gibs. Style of body part depends on language type."
[
	obsolete(string) : "Use env_shooter" : : " "
]
@PointClass color(255 0 0) base(obsolete, Targetname) iconsprite("editor/obsolete.vmt")= game_weapon_manager : 
	"An entity used to limit the number of a particular weapon type in the world. Useful in places where NPCs are spawning rapidly, dying, and dropping weapons." 
[
	weaponname(string) : "Weapon Classname" : "" : "Classname of the weapon type to limit."
	maxpieces(integer) : "Max Allowed in Level"	: 0 : "The maximum amount of the specified weapon type allowed in the world."
	ammomod(float)	   : "Ammo modifier" : 1 : 	"Modifier for ammount of ammo dropped by a weapon."
	// Inputs
	input SetAmmoModifier(float): "Adjust the ammo modifier."
]
@PointClass color(255 0 0) base(obsolete, Targetname) iconsprite("editor/obsolete.vmt")= game_score : 
	"An entity that awards/deducts points from the player who activates it." 
[
	spawnflags(flags) =
	[
		1: "Allow Negative" : 0
		2: "Team Points" : 0
	]
	points(integer) : "Points to add (+/-)" : 1
	master(string) : "Master (Obsolete)" : : "Legacy support: The name of a master entity. If the master hasn't been activated, this entity will not activate."
	// Inputs
	input ApplyScore(void) : "Add score to player."
]
@PointClass color(255 0 0) base(obsolete) iconsprite("editor/obsolete.vmt")= point_tesla : 
	"This entity is in the FGD but L4D2 does not have it."
[
	obsolete(string) : "Does not exist" : : "This entity is in the FGD but L4D2 does not have it."
]
@PointClass color(255 0 0) base(obsolete) iconsprite("editor/obsolete.vmt")= info_no_dynamic_shadow : 
	"This entity is in the FGD but L4D2 does not have it."
[
	obsolete(string) : "Does not exist" : : "This entity is in the FGD but L4D2 does not have it."
]
@PointClass color(255 0 0) base(obsolete) iconsprite("editor/obsolete.vmt")= info_overlay_transition :
	"This entity is in the FGD but L4D2 does not have it."
[
	obsolete(string) : "Does not exist" : : "This entity is in the FGD but L4D2 does not have it."
]
@PointClass color(255 0 0) base(obsolete) iconsprite("editor/obsolete.vmt") = info_intermission : 
	"This entity is in the FGD but L4D2 does not have it."
[
	obsolete(string) : "Does not exist" : : "This entity is in the FGD but L4D2 does not have it."
]
@PointClass color(255 0 0) base(obsolete, Targetname) iconsprite("editor/obsolete.vmt") = info_null : 
	"An entity that's immediately removed on spawning. Useful as a spotlight target."
[
	obsolete(string) : "Technically works, but any target will do." : : " "
]
@SolidClass color(255 0 0) base(obsolete, Targetname, Parentname, Origin) = func_water_analog :
	"A water brush entity that moves linearly along a given distance, in a given direction"
[
	obsolete(string) : "this does not work properly" : : " "
	movedir(angle) : "Move Direction (Pitch Yaw Roll)" : "0 0 0" : "The direction the water will move, when told to 'Open'."
	startposition(float) : "Start Position" : 0 : "Position of the water brush when spawned. The range is a value between 0.0 and 1.0, where 0 is the starting position and 1 is the starting position + (move direction * move distance)."	
	speed(integer) : "Speed" : 100 : "The speed that the water brush moves, in inches per second."
	movedistance(float) : "Move Distance" : 100 : "The distance from the starting point that the water brush should move, in inches."
	startsound(sound) : "Sound played when the water brush starts moving."
	stopsound(sound) : "Sound played when the water brush stops moving."
	WaveHeight(string) : "Wave Height" : "3.0"
	// Inputs
	input Open(void) : "Move the water brush to the end position (starting position + (move direction * move distance))."
	input Close(void) : "Move the water brush to the starting position."
	input SetPosition(string) : "Move the water brush to a specific position between 0.0 and 1.0, where 0 is the starting position and 1 is the starting position + (move direction * move distance)."
	// Outputs
	output OnFullyOpen(void) : "Fired when the water brush reaches the end position (starting position + (move direction * move distance))."
	output OnFullyClosed(void) : "Fired when the water brush reaches the starting position."
]
@PointClass color(255 0 0) base(obsolete) iconsprite("editor/obsolete.vmt")= logic_autosave :
	"does exist, but L4D2 does not have autosave."
[
	obsolete(string) : "Does not exist" : : "This entity is in the FGD but L4D2 does not have it."
]
@PointClass color(255 0 0) base(obsolete) iconsprite("editor/obsolete.vmt")= logic_active_autosave :
	"does exist, but L4D2 does not have autosave."
[
	obsolete(string) : "Does not exist" : : "This entity is in the FGD but L4D2 does not have it."
]
@PointClass color(255 0 0) base(obsolete) iconsprite("editor/obsolete.vmt")= point_angularvelocitysensor :
	"This entity is in the FGD but L4D2 does not have it."
[
	obsolete(string) : "Does not exist" : : "This entity is in the FGD but L4D2 does not have it."
]
@PointClass color(255 0 0) base(obsolete) iconsprite("editor/obsolete.vmt")= point_velocitysensor :
	"This entity is in the FGD but L4D2 does not have it."
[
	obsolete(string) : "Does not exist" : : "This entity is in the FGD but L4D2 does not have it."
]
@SolidClass color(255 0 0) base(obsolete, Targetname, Parentname) = func_illusionary : 
	"Legacy support. Use func_brush instead." 
[
	obsolete(string) : "Use Func_brush" : : " "
]
@SolidClass color(255 0 0) base(obsolete, func_wall) = func_wall_toggle : 
	"Legacy support. Use func_brush instead." 
[
	obsolete(string) : "Use Func_brush" : : " "
]
@SolidClass color(255 0 0) base(obsolete, Targetname)= func_wall : 
	"Legacy support. Use func_brush instead." 
[
	obsolete(string) : "use func_brush" : : " "
]
@SolidClass color(255 0 0) base(obsolete) = trigger_autosave : 
	"does exist, but L4D2 does not have autosave."
[
	obsolete(string) : "Does not exist" : : "This entity is in the FGD but L4D2 does not have it."
]
@SolidClass color(255 0 0) base(obsolete, info_changelevel) = trigger_changelevel : 
	"use info_changelevel"
[
	obsolete(string) : "USE INFO_CHANGELEVEL" : : " "
	obsolete2(string) : "surrogates to info_changelevel" : : " "
]
@PointClass color(255 0 0) base(obsolete) iconsprite("editor/obsolete.vmt") = ai_speechfilter : 
	"This entity is in the FGD but L4D2 does not have it."
[
	obsolete(string) : "Does not exist" : : "This entity is in the FGD but L4D2 does not have it."
]
@PointClass color(255 0 0) base(obsolete) iconsprite("editor/obsolete.vmt")= info_camera_link :
	"This entity is in the FGD but L4D2 does not have it."
[
	obsolete(string) : "Does not exist" : : "This entity is in the FGD but L4D2 does not have it."
]
@PointClass color(255 0 0) base(obsolete) iconsprite("editor/obsolete.vmt")= npc_furniture : 
	"This entity is in the FGD but L4D2 does not have it."
[
	obsolete(string) : "Does not exist" : : "This entity is in the FGD but L4D2 does not have it."
]
@PointClass color(255 0 0) base(obsolete) iconsprite("editor/obsolete.vmt")= logic_playerproxy :
	"This entity is in the FGD but L4D2 does not have it."
[
	obsolete(string) : "Does not exist" : : "This entity is in the FGD but L4D2 does not have it."
]
@PointClass color(255 0 0) base(obsolete, Targetname, Parentname, Angles) iconsprite("editor/obsolete.vmt")= env_projectedtexture : 
	"Projected texture entity. DO NOT USE"
[
	spawnflags(flags) =
	[
		1  : "Enabled"				: 1
	]
	obsolete(string) : "Doesn't work." : : "This entity is reused as the player flashlight. You can only have on on a map. which is your flashlight"
	target(target_destination)	: "target" : : "target"	
	lightfov(float)				: "FOV" : "90.0" : "FOV"
	nearz(float)				: "NearZ" : "4.0" : "Near Z for projected texture"
	farz(float)					: "FarZ" : "750.0" : "Far Z for projected texture"	
	enableshadows(Choices) : "Enable Shadows" : 0 : "Enables/disables shadows from this projected texture." =
	[
		0 : "No"
		1 : "Yes"
	]
	shadowquality(Choices) : "Shadow Quality" : 1 : "Quality of shadows." =
	[
		0 : "Low"
		1 : "High"
	]
	lightonlytarget(Choices) : "Light Only Target" : 0 : "Limit flashlight effect to only effect target entity." =
	[
		0 : "No"
		1 : "Yes"
	]
	lightworld(Choices) : "Light World" : 1 : "Control whether flashlight effects static world geometry." =
	[
		0 : "No"
		1 : "Yes"
	]
	lightcolor(color255)		: "Light Color" : "255 255 255 200" : "Light Color RGB-Intensity"
	cameraspace(integer)		: "Camera Space" : 0 : "Angles are interpreted as being relative to camera."
	// Inputs
	input TurnOn(void)		: "Turn on the texture"
	input TurnOff(void)		: "Turn off the texture"
	input SetFOV(float)		: "Set FOV"
]
@SolidClass color(255 0 0) base(obsolete, func_brush) = func_reflective_glass :
	"Used to produce perfectly reflective glass that renders world + entities. " +
	"Typically, you want your glass brush to have nodraw on all non-reflective surfaces " +
	"and you want to use a shader like lightmappedreflective in your material applied " +
	"to the non-nodraw surfaces. See hl2/materials/glass/reflectiveglass001.vmt for an example. " +
	"NOTE: currently, you cannot use reflective glass in scenes with water, and you can only " +
	"have 1 reflective glass in your view frustum ( + pvs ) at a time."
[
	obsolete(string) : "No idea if it works as intended." : : " "
]
@PointClass color(255 0 0) base(obsolete) iconsprite("editor/obsolete.vmt")= npc_puppet :
	"This entity is in the FGD but L4D2 does not have it."
[
	obsolete(string) : "Does not exist" : : "This entity is in the FGD but L4D2 does not have it."
]
@PointClass color(255 0 0) base(obsolete) iconsprite("editor/obsolete.vmt") = env_funnel : 
	"This entity is in the FGD but L4D2 does not have it."
[
	obsolete(string) : "Does not exist" : : "This entity is in the FGD but L4D2 does not have it."
]
////////////////////////////////////////////////////////////////////////////////////////////////////////
@PointClass color(255 0 0) base(obsolete,Targetname, Angles) iconsprite("editor/obsolete.vmt")= trigger_standoff :
	"use 'trigger_finale'"
[
	obsolete(string) : "use trigger_finale" : : " "
]

@PointClass base(obsolete, Targetname) iconsprite("editor/obsolete.vmt") = info_ambient_mob_start : "potential starting location for an ambient mob"
[                          
	obsolete(string) : "Unused, Deprecated or just broken" : : " "
]                          
						   
@PointClass base(obsolete, Targetname) iconsprite("editor/obsolete.vmt") = info_ambient_mob_end : "end location for an ambient mob"
[                          
	obsolete(string) : "Unused, Deprecated or just broken" : : " "
]                          
						   
@PointClass base(obsolete, Targetname) iconsprite("editor/obsolete.vmt") = info_ambient_mob : "Universal ambient mob start/end (use with care)"
[
	obsolete(string) : "Unused, Deprecated or just broken" : : " "
]

@PointClass base(obsolete,Angles) iconsprite("editor/obsolete.vmt") = test_traceline : 
	"A debugging tool for testing tracelines."
[
	obsolete(string) : "Unused, Deprecated or just broken" : : " "
]

@KeyFrameClass base(obsolete,Targetname, Parentname, Angles, KeyFrame) iconsprite("editor/obsolete.vmt") keyframe() = keyframe_track : 
	"Animation KeyFrame"
[
	obsolete(string) : "Unused, Deprecated or just broken" : : " "
]

@MoveClass base(obsolete,Targetname, Parentname, KeyFrame, Mover) iconsprite("editor/obsolete.vmt") animator() = move_keyframed : 
	"Keyframed Move Behavior"
[
	obsolete(string) : "Unused, Deprecated or just broken" : : " "
]

@MoveClass base(obsolete,Targetname, Parentname, Mover, KeyFrame) iconsprite("editor/obsolete.vmt") animator() = move_track : 
	"Track Move Behavior"
[
	obsolete(string) : "Unused, Deprecated or just broken" : : " "
	WheelBaseLength(integer) : "Distance between the wheels" : 50
	Damage(integer) : "Damage done to blocking entities" : 0
	NoRotate(choices) : "Turn to face down path" : 0 =
	[
		0 : "Yes"
		1 : "No"
	]
]
@PointClass base(obsolete,Targetname, Parentname) iconsprite("editor/obsolete.vmt") = point_message : 
	"An entity that displays a text message in the world, at its origin."
[
	obsolete(string) : "Unused, Deprecated or just broken" : : " "
	spawnflags(flags) =
	[
		1: "Start Disabled" : 0
	]

	message(string) : "Entity Message"
	radius(integer) : "Show message radius" : 128 : "Distance the player must be within to see this message."
	developeronly(choices) : "Developer Only?" : 0 : "If set, this message will only be visible when developer mode is on." =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input Enable(void) : "Start displaying the message text, if the player is within the message radius."
	input Disable(void) : "Stop displaying the message text."
]
@PointClass base(obsolete, Targetname) iconsprite("editor/obsolete.vmt") = env_zoom : 
	"An entity that can be used to control the player's FOV. Useful for scenes where the player's view is being controlled, or player-usable binoculars/telescopes, etc."
[
	obsolete(string) : "Unused, Deprecated or just broken" : : " "
	Rate(float) : "Seconds to reach target" : "1.0" : "Amount of time it should take to reach the specified FOV."
	FOV(integer) : "Target FOV" : 75 : "FOV that this entity should set the player's FOV to when active."

	// Inputs
	input Zoom(void) : "Start controlling the player's FOV."
	input UnZoom(void) : "Stop controlling the player's FOV."

	spawnflags(flags) =
	[
		1: "Allow Suit Zoom" : 0
	]
]
@PointClass base(obsolete, Targetname) iconsprite("editor/obsolete.vmt") = env_screeneffect :
	"Allows screenspace effects to be played on the player's view."
[
	obsolete(string) : "CRASHES L4D2" : : " "
	type(choices) : "Effect Type" : 0 : "Which effect to use." =
	[
		0 : "Advisor Stun"
		1 : "Intro Blur"
		2 : "Groggy Vision"
	]

	// Inputs
	input	StartEffect(float) : "Start the effect with the duration in seconds as the passed parameter."
	input   StopEffect(float) : "Stop the effect."
]

@PointClass base(obsolete, Targetname, Parentname, Angles) iconsprite("editor/obsolete.vmt") sphere(distance) lightcone()  = light_dynamic : 
	"An invisible lightsource that changes in some way over time." 
[
	obsolete(string) : "Does not function at all." : : " "
	target(target_destination) : "Entity to point at" : : "The name of an entity in the map that the dynamic light will point at."
	_light(color255) : "Light color" : "255 255 255 200"
	brightness(integer) : "Light brightness" : 0
	_inner_cone(integer) : "Inner (bright) angle" : 30
	_cone(integer) : "Outer (fading) angle" : 45
	pitch(integer) : "Pitch" : -90
	distance(float) : "Maximum distance" : 120 : "This is the distance that light is allowed to cast, in inches."
	spotlight_radius(float) : "Spotlight end radius" : 80 : "This is the radius of the light, in inches, at the object that it is hitting."
    style(Choices) : "Appearance" : 0 =
	[
		0 : "Normal"
		10: "Fluorescent flicker"
		2 : "Slow, strong pulse"
		11: "Slow pulse, noblack"
		5 : "Gentle pulse"
		1 : "Flicker A"
		6 : "Flicker B"
		3 : "Candle A"
		7 : "Candle B"
		8 : "Candle C"
		4 : "Fast strobe"
		9 : "Slow strobe"
	]
	spawnflags(Flags) = 
	[ 
		1 : "Do not light world (better perf)" : 0 
		2 : "Do not light models" : 0
		4 : "Add Displacement Alpha" : 0
		8 : "Subtract Displacement Alpha" : 0
	]

	// Inputs
	input Color(color255) : "Set the light's render color (R G B)."
	input brightness(integer) : "Set the light brightness."
	input distance(float) : "Set the maximum light distance."
	input _inner_cone(integer) : "Set the inner (bright) angle."
	input _cone(integer) : "Set the outer (fading) angle."
	input spotlight_radius(float) : "Set the radius of the spotlight at the end point."
	input style(integer) : "Change the lightstyle (see Appearance field for possible values)."

	input TurnOn(void) : "Turn the light off."
	input TurnOff(void) : "Turn the light on."
	input Toggle(void) : "Toggle the light on/off."
]

@PointClass base(obsolete, Targetname,Angles,Parentname) studioprop("models/editor/camera.mdl") = point_viewcontrol : 
	"Use point_viewcontrol_survivor for individual survivors or point_viewcontrol_multiplayer for all survivors at once" 
[
	obsolete(string) : "Obsolete" : : " "

	fov(float) : "Field of view" : "90" : "Player FOV (if Set FOV spawnflag is set)"
	fov_rate(float) : "Seconds to reach FOV target" : "1.0" : "Amount of time it should take to reach the specified FOV"

	target(target_destination) : "Entity to Look At" : : "Name of the entity that the camera should point at and track while active."
	targetattachment(string) : "Target Attachment Name" : : "If set, the camera will focus on the specified attachment on the 'Entity to Look At'."
	wait(integer) : "Hold Time" : 10 : "The amount of time the camera should control the player's view for, after which it deactivates itself. If the camera should stay active until told to deactive, set the 'Infinite Hold Time' spawnflag."
	moveto(target_destination) : "Path Corner" : : "The first path corner in a track that the camera should move along once it's activated. If not specified, the camera won't move."
	interpolatepositiontoplayer(choices) : "Interpolate Position To Player" : 0 : "Gradually interpolate player's position to here on start. (Episodic only)" =
	[
		0 : "No"
		1 : "Yes"
	]
	spawnflags(flags) =
	[
		1: "Start At Player" : 1
		2: "Follow Player" : 1
		4: "Freeze Player" : 0
		8: "Infinite Hold Time" : 0
		16:"Snap to goal angles" : 0
		32:"Make Player non-solid" : 0
		64:"Interruptable by Player" : 0
		128:"Set FOV" : 0
	]
	speed(string) : "Initial Speed" : "0" : "The starting speed that the camera moves at, if it's on a path track."
	acceleration(string) : "Acceleration units/sec^2" : "500" : "The speed at which the camera accelerates to path corner's desired speeds."
	deceleration(string) : "Stop Deceleration units/sec^2" : "500" : "The speed at which the camera decelerates to path corner's desired speeds."

	// Inputs
	input Enable(string) : "Enable the point_viewcontrol, and start controlling the player's view. Pass a survivor name to control that survivor's view.(ie '!zoey')"
	input Disable(void) : "Disable the point_viewcontrol, and stop controlling the player's view."

	// Outputs
	output OnEndFollow(void) : "Fired when the point_viewcontrol deactivates, due to the Disable input being received, the Entity to Look At being destroyed, or the Hold Time expiring."
]